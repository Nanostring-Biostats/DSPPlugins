par(mfrow = c(4, 2))
par(mar = c(1,1,1,1))
for (name in names(norms)) {
for (n2 in c("cors",  "cors.signal")) {
temp = get(n2)
plot(rowMeans(raw[names(temp[[name]]), ]),
temp[[name]], main = name,
ylim = c(-1,1), log = "x")
abline(h=0, col = 3)
points(mean(raw["NegProbe", ]), temp[[name]]["NegProbe"], pch = 16, col = 4, cex = 2)
hks = c("ACTB", "GUSB", "OAZ1", "UBB")
points(rowMeans(raw[hks, ]), temp[[name]][hks], pch = 16, col = 2, cex = 2)
}
}
quant = 0.9
norms = list()
tempquant = apply(raw, 2, quantile, quant)
norms$quant = sweep(raw, 2, tempquant, "/")
norms$neg = sweep(raw, 2, annot$neg, "/")
#norms$scale.sub = pmax(sweep(norms$quant, 2, norms$quant["NegProbe", ], "-"), 0)
# estimate background on scale of raw data:
bg.raw = sweep(raw*0, 2, raw["NegProbe", ], "+")
bgsub = pmax(raw - bg.raw, 0)
# background-subtracted normalizations:
norms$quant.bgsub = sweep(bgsub, 2, apply(bgsub, 2, quantile, quant), "/") # computes q3 *after* bg subtraction
norms$neg.bgsub = sweep(bgsub, 2, annot$neg, "/")
norms$bgsub.only = bgsub
norms[["neg.bgsub"]] = NULL
use = (annot$tissue == "CRC 13") & (annot$SegmentLabel == "PanCK-pos")
top10 = list()
cors = list()
cors.neg = cors.signal = list()
for (name in names(norms)) {
top10[[name]] = rownames(norms[[name]])[order(abs(cor(annot$bg.signal.logratio[use], t(norms[[name]][, use]))), decreasing = T)[1:20]]
cors[[name]] = as.vector(cor(annot$bg.signal.logratio[use], t(norms[[name]][, use])))
cors.neg[[name]] = as.vector(cor(annot$neg[use], t(norms[[name]][, use])))
cors.signal[[name]] = as.vector(cor(annot$qsignal[use], t(norms[[name]][, use])))
names(cors[[name]]) = rownames(norms[[name]])
names(cors.neg[[name]]) = names(cors.signal[[name]]) = names(cors[[name]])
}
annot$quant = apply(raw,2,quantile,quant)
cors.neg = cors.signal = list()
for (name in names(norms)) {
top10[[name]] = rownames(norms[[name]])[order(abs(cor(annot$bg.signal.logratio[use], t(norms[[name]][, use]))), decreasing = T)[1:20]]
cors[[name]] = as.vector(cor(annot$bg.signal.logratio[use], t(norms[[name]][, use])))
cors.neg[[name]] = as.vector(cor(annot$neg[use], t(norms[[name]][, use])))
cors.signal[[name]] = as.vector(cor(annot$quant[use], t(norms[[name]][, use])))
names(cors[[name]]) = rownames(norms[[name]])
names(cors.neg[[name]]) = names(cors.signal[[name]]) = names(cors[[name]])
}
par(mfrow = c(4, 2))
par(mar = c(1,1,1,1))
for (name in names(norms)) {
for (n2 in c("cors",  "cors.signal")) {
temp = get(n2)
plot(rowMeans(raw[names(temp[[name]]), ]),
temp[[name]], main = name,
ylim = c(-1,1), log = "x")
abline(h=0, col = 3)
points(mean(raw["NegProbe", ]), temp[[name]]["NegProbe"], pch = 16, col = 4, cex = 2)
hks = c("ACTB", "GUSB", "OAZ1", "UBB")
points(rowMeans(raw[hks, ]), temp[[name]][hks], pch = 16, col = 2, cex = 2)
}
}
plot(raw["ACTB", ], annot$qsignal)
plot(raw["ACTB", ], annot$qsignal, log = "xy")
# zoom in on genes:
plot(rowMeans(raw[names(cors[["quant.bgsub"]]), ]),
cors[["quant.bgsub"]], main = name,
ylim = c(-1,1), log = "x")
genes = identify(rowMeans(raw[names(cors[["quant.bgsub"]]), ]),
cors[["quant.bgsub"]])
genes
genes = c(153,  364,  517,  578,  715,  956 ,1522, 1738)
genes = names(cors[["quant.bgsub"]])[c(153,  364,  517,  578,  715,  956 ,1522, 1738)]
genes
par(mfrow = c(2,2))
for (gene in genes) {
plot(norms[["quant.bgsub"]][gene, ] ~ annot$bg.signal.logratio)
plot(norms[["quant.bgsub"]][gene, ] ~ annot$quant)
}
dev.off()
par(mfrow = c(2,2))
for (gene in genes) {
plot(norms[["quant.bgsub"]][gene, use] ~ annot$bg.signal.logratiouse)
plot(norms[["quant.bgsub"]][gene, use] ~ annot$quantuse)
}
par(mfrow = c(2,2))
for (gene in genes) {
plot(norms[["quant.bgsub"]][gene, use] ~ annot$bg.signal.logratio[use])
plot(norms[["quant.bgsub"]][gene, use] ~ annot$quant[use])
}
par(mfrow = c(2,2))
for (gene in genes) {
plot(norms[["quant.bgsub"]][gene, use] ~ annot$bg.signal.logratio[use],
ylab = gene, xlab = "bg/signal")
plot(norms[["quant.bgsub"]][gene, use] ~ annot$quant[use],
ylab = gene, xlab = "signal")
}
quantile(norms$quant.bgsub, 0.5)
dev.off()
par(mfrow = c(2,2))
for (gene in genes) {
plot(norms[["quant.bgsub"]][gene, use] ~ annot$bg.signal.logratio[use],
ylab = gene, xlab = "bg/signal", ylim = c(0, max(norms[["quant.bgsub"]][genes, use])))
plot(norms[["quant.bgsub"]][gene, use] ~ annot$quant[use],
ylab = gene, xlab = "signal", ylim = c(0, max(norms[["quant.bgsub"]][genes, use])))
}
par(mfrow = c(2,2))
for (gene in genes) {
plot(norms[["quant.bgsub"]][gene, use] ~ annot$bg.signal.logratio[use], log = "xy",
ylab = gene, xlab = "bg/signal", ylim = c(0.01, max(norms[["quant.bgsub"]][genes, use])))
plot(norms[["quant.bgsub"]][gene, use] ~ annot$quant[use],log = "xy",
ylab = gene, xlab = "signal", ylim = c(0.01, max(norms[["quant.bgsub"]][genes, use])))
}
for (gene in genes) {
plot(norms[["quant.bgsub"]][gene, use] ~ annot$bg.signal.logratio[use], log = "xy",
ylab = gene, xlab = "bg/signal", ylim = c(0.01, max(norms[["quant.bgsub"]][genes, use])))
plot(norms[["quant.bgsub"]][gene, use] ~ annot$quant[use],log = "xy",
ylab = gene, xlab = "signal", ylim = c(0.01, max(norms[["quant.bgsub"]][genes, use])))
}
par(mfrow = c(2,2))
for (gene in genes) {
plot(norms[["quant.bgsub"]][gene, use] ~ annot$bg.signal.logratio[use], log = "y",
ylab = gene, xlab = "bg/signal", ylim = c(0.01, max(norms[["quant.bgsub"]][genes, use])))
plot(norms[["quant.bgsub"]][gene, use] ~ annot$quant[use],log = "y",
ylab = gene, xlab = "signal", ylim = c(0.01, max(norms[["quant.bgsub"]][genes, use])))
}
plot(t(raw[c("NDUFB7", "CEACAM6"), ]))
par(mfrow = c(4, 2))
par(mar = c(1,1,1,1))
for (name in names(norms)) {
for (n2 in c("cors",  "cors.signal")) {
temp = get(n2)
plot(rowMeans(raw[names(temp[[name]]), ]),
temp[[name]], main = name,
ylim = c(-1,1), log = "x")
abline(h=0, col = 3)
points(mean(raw["NegProbe", ]), temp[[name]]["NegProbe"], pch = 16, col = 4, cex = 2)
hks = c("ACTB", "GUSB", "OAZ1", "UBB")
points(rowMeans(raw[hks, ]), temp[[name]][hks], pch = 16, col = 2, cex = 2)
}
}
gene = "ACTB"
plot(norms[["quant.bgsub"]][gene, use] ~ annot$bg.signal.logratio[use], log = "y",
ylab = gene, xlab = "bg/signal", ylim = c(0.01, max(norms[["quant.bgsub"]][genes, use])))
plot(norms[["quant.bgsub"]][gene, use] ~ annot$bg.signal.logratio[use], log = "y",
ylab = gene, xlab = "bg/signal")
plot(norms[["quant.bgsub"]][gene, use] ~ annot$bg.signal.logratio[use], log = "y",
ylab = gene, xlab = "bg/signal")
plot(norms[["quant.bgsub"]][gene, use] ~ annot$quant[use],log = "y",
ylab = gene, xlab = "signal")
gene = "GUSB"
par(mfrow = c(4, 2))
par(mar = c(1,1,1,1))
for (name in names(norms)) {
for (n2 in c("cors",  "cors.signal")) {
temp = get(n2)
plot(rowMeans(raw[names(temp[[name]]), ]),
temp[[name]], main = name,
ylim = c(-1,1), log = "x")
abline(h=0, col = 3)
points(mean(raw["NegProbe", ]), temp[[name]]["NegProbe"], pch = 16, col = 4, cex = 2)
hks = c("ACTB", "GUSB", "OAZ1", "UBB")
points(rowMeans(raw[hks, ]), temp[[name]][hks], pch = 16, col = 2, cex = 2)
}
}
abline(h=c(-1,1), col = 4)
par(mfrow = c(4, 2))
par(mar = c(1,1,1,1))
for (name in names(norms)) {
for (n2 in c("cors",  "cors.signal")) {
temp = get(n2)
plot(rowMeans(raw[names(temp[[name]]), ]),
temp[[name]], main = name,
ylim = c(-1,1), log = "x")
abline(h=0, col = 3)
abline(h=c(-1,1), col = 4)
points(mean(raw["NegProbe", ]), temp[[name]]["NegProbe"], pch = 16, col = 4, cex = 2)
hks = c("ACTB", "GUSB", "OAZ1", "UBB")
points(rowMeans(raw[hks, ]), temp[[name]][hks], pch = 16, col = 2, cex = 2)
}
}
identical(rownames(norms[[1]]), names(cors[1]))
identical(rownames(norms[[1]]), names(cors[[1]]))
plot(rowMeans(raw[names(temp[[name]]), ]),
temp[[name]], main = name,
ylim = c(-1,1), log = "x",
col = 1 + (rowSums(norms[[name]]==0)>0))
par(mfrow = c(4, 2))
par(mar = c(1,1,1,1))
for (name in names(norms)) {
for (n2 in c("cors",  "cors.signal")) {
temp = get(n2)
plot(rowMeans(raw[names(temp[[name]]), ]),
temp[[name]], main = name,
ylim = c(-1,1), log = "x",
col = 1 + (rowSums(norms[[name]]==0)>0))
abline(h=0, col = 3)
abline(h=c(-1,1), col = 4)
points(mean(raw["NegProbe", ]), temp[[name]]["NegProbe"], pch = 16, col = 4, cex = 2)
hks = c("ACTB", "GUSB", "OAZ1", "UBB")
points(rowMeans(raw[hks, ]), temp[[name]][hks], pch = 16, col = 2, cex = 2)
}
}
# zoom in on genes:
plot(rowMeans(raw[names(cors[["quant.bgsub"]]), ]),
cors[["quant.bgsub"]], main = name,
ylim = c(-1,1), log = "x")
genes = identify(rowMeans(raw[names(cors[["quant.bgsub"]]), ]),
cors[["quant.bgsub"]])
genes
genes = names(cors[["quant.bgsub"]])[c(134,  144  ,612,  869,  974, 1162, 1471, 1507)]
par(mfrow = c(2,2))
for (gene in genes) {
plot(norms[["quant.bgsub"]][gene, use] ~ annot$bg.signal.logratio[use], log = "y",
ylab = gene, xlab = "bg/signal", ylim = c(0.01, max(norms[["quant.bgsub"]][genes, use])))
plot(norms[["quant.bgsub"]][gene, use] ~ annot$quant[use],log = "y",
ylab = gene, xlab = "signal", ylim = c(0.01, max(norms[["quant.bgsub"]][genes, use])))
}
dev.off()
par(mfrow = c(2,2))
for (gene in genes) {
plot(norms[["quant.bgsub"]][gene, use] ~ annot$bg.signal.logratio[use], log = "y",
ylab = gene, xlab = "bg/signal", ylim = c(0.01, max(norms[["quant.bgsub"]][genes, use])))
plot(norms[["quant.bgsub"]][gene, use] ~ annot$quant[use],log = "y",
ylab = gene, xlab = "signal", ylim = c(0.01, max(norms[["quant.bgsub"]][genes, use])))
}
plot(norms[["quant.bgsub"]][gene, use] ~ annot$bg.signal.logratio[use], log = "none",
ylab = gene, xlab = "bg/signal", ylim = c(0.01, max(norms[["quant.bgsub"]][genes, use])))
par(mfrow = c(2,2))
for (gene in genes) {
plot(norms[["quant.bgsub"]][gene, use] ~ annot$bg.signal.logratio[use], log = "",
ylab = gene, xlab = "bg/signal", ylim = c(0.01, max(norms[["quant.bgsub"]][genes, use])))
plot(norms[["quant.bgsub"]][gene, use] ~ annot$quant[use],log = "",
ylab = gene, xlab = "signal", ylim = c(0.01, max(norms[["quant.bgsub"]][genes, use])))
}
# zoom in on genes:
plot(rowMeans(raw[names(cors[["quant.bgsub"]]), ]),
cors[["quant.bgsub"]], main = name,
ylim = c(-1,1), log = "x")
# zoom in on genes:
plot(rowMeans(log2(raw)[names(cors[["quant.bgsub"]]), ]),
cors[["quant.bgsub"]], main = name,
ylim = c(-1,1), log = "x")
hist(cors[3])
hist(cors[[3]])
for (name in names(cors)){hist(cors[[name]])}
par(mfrow=c(22))
par(mfrow=c(2,2))
for (name in names(cors)){hist(cors[[name]], main = name)}
for (name in names(cors)){hist(cors[[name]], main = name, xlim = c(-1,1))}
?t.test
dists = seq(1,100, 1)
dists
plot(dists, 10^-d)
plot(dists, 10^-dists)
dists = seq(0,1, 0.01)
plot(dists, 10^-dists)
plot(dists, 1 - dists^2)
plot(dists, (1/exp(dists^2)) )
dists = seq(0,2, 0.01)
plot(dists, 10^-dists)
plot(dists, 1 - dists^2)
plot(dists, (1/exp(dists^2)) )
par(mfrow= c(1,3))
plot(distance, 10^-distance)
plot(distance, 1 - distance^2)
distance = seq(0,2, 0.01)
par(mfrow= c(1,3))
plot(distance, 10^-distance)
plot(distance, 1 - distance^2)
plot(distance, (1/exp(distance^2)) )
plot(distance, pmax(1 - distance^2, 0), cex.lab = 1.5)
par(mfrow= c(1,3))
plot(distance, 10^-distance, cex.lab = 1.5)
plot(distance, pmax(1 - distance^2, 0), cex.lab = 1.5)
plot(distance, (1/exp(distance^2)) , cex.lab = 1.5)
par(mfrow= c(1,3))
plot(distance, 10^-distance, cex.lab = 1.5)
plot(distance, pmax(1 - distance^2, 0), cex.lab = 1.5)
plot(distance, (1/exp(distance^2)) , cex.lab = 1.5)
load("C:/Users/pdanaher/Box Sync/Gemini/03 - melanoma/decon supporting data.RData")
ls()
str(training.matrices)
load("C:/Users/pdanaher/Documents/BC360-manuscript/data/bc360 datasets.RData")
ls()
str(annotlist)
names(annotlist)
load("C:/Users/pdanaher/Documents/BC360-manuscript/data_pre_pipeline/BC360 datasets/puma data.RData")
ls()
str(pumadata)
names(pumadata)
head(pumadata$sample.annot)
write.csv(pumadata$sample.annot, file = "Puma BC360 data.csv")
getwd()
load("C:/Users/pdanaher/Documents/SpatialDecon/data/mini_geomx_dataset.RData")
ls()
str(mini_geomx_dataset)
install.packages("spdep")
library(pheatmap)
library(UMAP)
library(scales)
library(RColorBrewer)
# This is a template workflow for Gemini data analysis.
library(devtools)
install_github(repo = "https://github.com/Nanostring-Biostats/Ptolemy/tree/zach_spatialac")
?pdf
?png
setwd("~/plugins/DSPPlugins/build decon plugin")
rm(list = ls())
source("SpatialDecon_plugin.R")
load("test data/2.0.0.89 Dev1 M-275 NGS CTAx4.RData")
source('~/plugins/DSPPlugins/build decon plugin/main.R', echo=TRUE)
plot_filetype = "png"
# run it:
main(
dataset = dataset,
segmentAnnotations = segmentAnnotations,
targetAnnotations = targetAnnotations,
outputFolder = "testresults"
)
heatmaptruncationlimit <- NULL
pdf_width <- 12
pdf_height <- 7
plot_filetype = "png"
plot_filetype <- "pdf"  # could also be "svg" "png" or "tiff"
plot_filetype = "png"
subset_of_cells_to_show <- NULL
#### preliminaries ----------------------
dataset <- as.matrix(dataset)
# access cell profile matrix file:
X <- as.matrix(read.csv(cell_profile_filename, header = TRUE, row.names = 1))
# ARGUMENT (hidden): define cell types to be added together in the final result:
# example syntax:
# merges = list()
# merges[["T"]] = c("CD8.T", "CD4.T")
# merges[["myeloid"]] = c("macrophage", "monocyte", "DC")
merges <- list()
# parse merges:
mergesFull <- NULL
if (length(merges) > 0) {
# initialize with 1:1 mapping:
mergesFull <- list()
for (name in colnames(X)) {
mergesFull[[name]] <- name
}
# add merges:
for (name in names(merges)) {
# remove entries for cells specified by user and replace with their entries:
mergesFull[merges[[name]]] <- NULL
mergesFull[[name]] <- merges[[name]]
}
}
# ARGUMENT (hidden): enter the name of the column giving nuclei counts
nuclei_count_column_name <- "this_is_hidden_for_advanced_users" # "AOINucleiCount"
# parse nuclei column
cell_counts <- NULL
if (is.element(nuclei_count_column_name, colnames(segmentAnnotations))) {
cell_counts <- as.numeric(segmentAnnotations[, nuclei_count_column_name])
}
# parse pure tumor column
is_pure_tumor <- NULL
if (is.element(pure_tumor_column_name, colnames(segmentAnnotations))) {
is_pure_tumor <- tolower(segmentAnnotations[, pure_tumor_column_name]) == "tumor"
is_pure_tumor <- replace(is_pure_tumor, is.na(is_pure_tumor), FALSE)
}
if (!is.element(pure_tumor_column_name, colnames(segmentAnnotations)) & (pure_tumor_column_name != "none")) {
warning("The value entered for pure_tumor_column_name was not a column header in the segment annotations.")
}
# format data for spatialdecon:
norm <- dataset[targetAnnotations$TargetGUID, segmentAnnotations$segmentID]
rownames(norm) <- targetAnnotations$TargetName
if (all(is.element(c("ScanName", "ROIName", "SegmentName"), colnames(segmentAnnotations)))) {
segmentAnnotations <- mutate(segmentAnnotations,
segmentDisplayName = paste(ScanName, ROIName, SegmentName, sep = " | ")
)
if (all(!duplicated(segmentAnnotations$segmentDisplayName))) {
colnames(norm) <- segmentAnnotations$segmentDisplayName
rownames(segmentAnnotations) <- segmentAnnotations$segmentDisplayName
}
}
# calculate background:
bg <- derive_GeoMx_background(
norm = norm,
probepool = targetAnnotations$ProbePool,
negnames = targetAnnotations$TargetName[targetAnnotations$CodeClass == "Negative"]
)
#### run decon: ----------------------------------------
# decon:
res <- spatialdecon(
norm = norm,
bg = bg,
X = X,
is_pure_tumor = is_pure_tumor,
cell_counts = cell_counts,
cellmerges = mergesFull
)
# parse the argument for variables to plot:
if (length(setdiff(variables_to_plot, colnames(segmentAnnotations))) > 0) {
warning(paste0(
"the variables_to_plot values",
paste0(setdiff(variables_to_plot, colnames(segmentAnnotations)), collapse = ", "),
" are not present in the segmentAnnotations"
))
}
variables_to_plot <- intersect(variables_to_plot, colnames(segmentAnnotations))
heatmapannot <- NULL
if (length(variables_to_plot) > 0) {
heatmapannot <- segmentAnnotations[, variables_to_plot, drop = FALSE]
rownames(heatmapannot) <- colnames(res$beta)
# rownames(heatmapannot) <- segmentAnnotations$segmentDisplayName
}
# colors for variables_to_plot:
if (!exists("cols")) {
cols <- assign_colors(segmentAnnotations[, variables_to_plot])
}
# show just the original cells, not tumor abundance estimates derived from the is.pure.tumor argument:
cells.to.plot <- intersect(rownames(res$beta), union(colnames(X), names(mergesFull)))
## show only a subset of cells if specified:
if (length(subset_of_cells_to_show) >= 2) {
cells.to.plot <- intersect(cells.to.plot, subset_of_cells_to_show)
}
# one pdf for all results:
if (plot_filetype == "pdf") {
pdf(file = file.path(outputFolder, "spatialdecon_results.pdf", fsep = .Platform$file.sep), width = pdf_width, height = pdf_height)
}
#### heatmaps
# abundances:
if (length(heatmaptruncationlimit) == 1) {
thresh <- heatmaptruncationlimit
}
if (length(heatmaptruncationlimit) == 0) {
thresh <- signif(quantile(res$beta, 0.97), 2)
}
if (plot_filetype == "png") {
png(file = file.path(outputFolder, "spatialdecon_results_abundance_heatmap.png", fsep = .Platform$file.sep),
width = pdf_width, height = pdf_height, units = "in", res = 2000)
}
outputFolder = "testresults"
png(file = file.path(outputFolder, "spatialdecon_results_abundance_heatmap.png", fsep = .Platform$file.sep),
width = pdf_width, height = pdf_height, units = "in", res = 2000)
p1 <- pheatmap(pmin(res$beta[cells.to.plot, ], thresh),
col = colorRampPalette(hmcols)(100),
fontsize_col = 4,
angle_col = 90,
annotation_col = heatmapannot,
annotation_colors = cols,
legend_breaks = c(round(seq(0, thresh, length.out = 5))[-5], thresh),
legend_labels = c(round(seq(0, thresh, length.out = 5))[-5], paste0("Abundance scores,\ntruncated above at ", thresh))
# main = paste0("Abundance scores, truncated above at ", thresh)
)
if (plot_filetype != "pdf") {
dev.off()
}
source('~/plugins/DSPPlugins/build decon plugin/main.R', echo=TRUE)
plot_filetype = "tiff"
# run it:
main(
dataset = dataset,
segmentAnnotations = segmentAnnotations,
targetAnnotations = targetAnnotations,
outputFolder = "testresults"
)
?tiff
str(res)
tiff(file = file.path(outputFolder, "spatialdecon_results_abundance_heatmap.tiff", fsep = .Platform$file.sep),
width = pdf_width, height = pdf_height, units = "in", res = 2000)
tiff(file = file.path(outputFolder, "spatialdecon_results_abundance_heatmap.tiff", fsep = .Platform$file.sep),
width = pdf_width, height = pdf_height, units = "in", res = 150)
p1 <- pheatmap(pmin(res$beta[cells.to.plot, ], thresh),
col = colorRampPalette(hmcols)(100),
fontsize_col = 4,
angle_col = 90,
annotation_col = heatmapannot,
annotation_colors = cols,
legend_breaks = c(round(seq(0, thresh, length.out = 5))[-5], thresh),
legend_labels = c(round(seq(0, thresh, length.out = 5))[-5], paste0("Abundance scores,\ntruncated above at ", thresh))
# main = paste0("Abundance scores, truncated above at ", thresh)
)
dev.off()
tiff(file = file.path(outputFolder, "spatialdecon_results_abundance_heatmap.tiff", fsep = .Platform$file.sep),
width = pdf_width, height = pdf_height, units = "in", dpi=300)
png(file = file.path(outputFolder, "spatialdecon_results_abundance_heatmap.png", fsep = .Platform$file.sep),
width = pdf_width, height = pdf_height, units = "in", res = 2000)
p1 <- pheatmap(pmin(res$beta[cells.to.plot, ], thresh),
col = colorRampPalette(hmcols)(100),
fontsize_col = 4,
angle_col = 90,
annotation_col = heatmapannot,
annotation_colors = cols,
legend_breaks = c(round(seq(0, thresh, length.out = 5))[-5], thresh),
legend_labels = c(round(seq(0, thresh, length.out = 5))[-5], paste0("Abundance scores,\ntruncated above at ", thresh))
# main = paste0("Abundance scores, truncated above at ", thresh)
)
dev.off()
rm(list = ls())
source("SpatialDecon_plugin.R")
load("test data/2.0.0.89 Dev1 M-275 NGS CTAx4.RData")
source('~/plugins/DSPPlugins/build decon plugin/main.R', echo=TRUE)
plot_filetype <- "svg"
# run it:
main(
dataset = dataset,
segmentAnnotations = segmentAnnotations,
targetAnnotations = targetAnnotations,
outputFolder = "testresults"
)
setwd("~/plugins/DSPPlugins/build decon plugin")
source('~/plugins/DSPPlugins/build decon plugin/build spatialdecon plugin.R', echo=TRUE)
library(usethis)
use_tidy_style()
